"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[9386],{876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=a.createContext({}),l=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(m.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,m=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(n),d=r,h=p["".concat(m,".").concat(d)]||p[d]||u[d]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var m in t)hasOwnProperty.call(t,m)&&(s[m]=t[m]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9108:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(7896),r=(n(2784),n(876));const o={},i="Quickstart",s={unversionedId:"quickstart",id:"quickstart",title:"Quickstart",description:"Let's walk through setup of a form after installing the dependency properly.",source:"@site/docs/01-quickstart.md",sourceDirName:".",slug:"/quickstart",permalink:"/react-jsonschema-form/docs/quickstart",draft:!1,editUrl:"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/docs/01-quickstart.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"docs",previous:{title:"Introduction",permalink:"/react-jsonschema-form/docs/"},next:{title:"Advanced Customization",permalink:"/react-jsonschema-form/docs/advanced-customization/"}},m={},l=[{value:"Form schema",id:"form-schema",level:2},{value:"Form uiSchema",id:"form-uischema",level:2},{value:"Form initialization",id:"form-initialization",level:2},{value:"Form event handlers",id:"form-event-handlers",level:3},{value:"Controlled component",id:"controlled-component",level:3}],c={toc:l},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"quickstart"},"Quickstart"),(0,r.kt)("p",null,"Let's walk through setup of a form after installing the dependency properly.\nNOTE: As of version 5, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Form")," now requires you to provide a ",(0,r.kt)("inlineCode",{parentName:"p"},"validator")," implementation. We recommend the one from ",(0,r.kt)("inlineCode",{parentName:"p"},"@rjsf/validator-ajv8"),"."),(0,r.kt)("h2",{id:"form-schema"},"Form schema"),(0,r.kt)("p",null,"First, specify a schema using the ",(0,r.kt)("a",{parentName:"p",href:"https://json-schema.org/"},"JSON Schema specification"),". The below schema renders a single string field:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  title: 'Test form',\n  type: 'string',\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n")),(0,r.kt)("p",null,"You can also render an object with multiple fields with the below schema:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  title: 'Test form',\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n    },\n    age: {\n      type: 'number',\n    },\n  },\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n")),(0,r.kt)("p",null,"For more information and examples of JSON Schema properties that this library supports, see ",(0,r.kt)("a",{parentName:"p",href:"/react-jsonschema-form/docs/json-schema/single"},"Using JSON Schema"),"."),(0,r.kt)("h2",{id:"form-uischema"},"Form uiSchema"),(0,r.kt)("p",null,"The uiSchema is used to add more customization to the form's look and feel. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"classNames"),"\nattribute of the uiSchema to add a custom CSS class name to the form:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  title: 'Test form',\n  type: 'string',\n};\n\nconst uiSchema: UiSchema = {\n  'ui:classNames': 'custom-css-class',\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n")),(0,r.kt)("p",null,"To customize object fields in the uiSchema, the structure of the\nuiSchema should be ",(0,r.kt)("inlineCode",{parentName:"p"},"{key: value}"),", where ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," is the property key and ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," is an\nobject with the uiSchema configuration for that particular property. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  title: 'Test form',\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string',\n    },\n    age: {\n      type: 'number',\n    },\n  },\n};\n\nconst uiSchema: UiSchema = {\n  name: {\n    'ui:classNames': 'custom-class-name',\n  },\n  age: {\n    'ui:classNames': 'custom-class-age',\n  },\n};\n\nrender(<Form schema={schema} validator={validator} />, document.getElementById('app'));\n")),(0,r.kt)("h2",{id:"form-initialization"},"Form initialization"),(0,r.kt)("p",null,"Often you'll want to prefill a form with existing data; this is done by passing a ",(0,r.kt)("inlineCode",{parentName:"p"},"formData")," prop object matching the schema:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  properties: {\n    title: {\n      type: 'string',\n    },\n    done: {\n      type: 'boolean',\n    },\n  },\n};\n\nconst formData = {\n  title: 'First task',\n  done: true,\n};\n\nrender(<Form schema={schema} formData={formData} validator={validator} />, document.getElementById('app'));\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: If your form has a single field, pass a single value to ",(0,r.kt)("inlineCode",{parentName:"p"},"formData"),". ex: ",(0,r.kt)("inlineCode",{parentName:"p"},'formData="Charlie"'))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"WARNING: If you have situations where your parent component can re-render, make sure you listen to the ",(0,r.kt)("inlineCode",{parentName:"p"},"onChange")," event and update the data you pass to the ",(0,r.kt)("inlineCode",{parentName:"p"},"formData")," attribute.")),(0,r.kt)("h3",{id:"form-event-handlers"},"Form event handlers"),(0,r.kt)("p",null,"You can use event handlers such as ",(0,r.kt)("inlineCode",{parentName:"p"},"onChange"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"onError"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"onSubmit"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"onFocus"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"onBlur")," on the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Form />")," component; see the ",(0,r.kt)("a",{parentName:"p",href:"/react-jsonschema-form/docs/api-reference/form-props"},"Form Props Reference")," for more details."),(0,r.kt)("h3",{id:"controlled-component"},"Controlled component"),(0,r.kt)("p",null,"By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"<Form />")," is an ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/uncontrolled-components.html"},"uncontrolled component"),". To make it a controlled component, use the\n",(0,r.kt)("inlineCode",{parentName:"p"},"onChange")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"formData")," props as in the below example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import validator from '@rjsf/validator-ajv8';\n\nconst App = () => {\n  const [formData, setFormData] = React.useState(null);\n  return (\n    <Form\n      schema={{ type: 'string' }}\n      formData={formData}\n      onChange={(e) => setFormData(e.formData)}\n      validator={validator}\n    />\n  );\n};\n\nrender(<App />, document.getElementById('app'));\n")))}u.isMDXComponent=!0}}]);