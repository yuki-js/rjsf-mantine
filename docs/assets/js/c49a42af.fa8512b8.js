"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[1193],{876:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=l(n),d=r,h=p["".concat(c,".").concat(d)]||p[d]||u[d]||o;return n?a.createElement(h,s(s({ref:t},m),{},{components:n})):a.createElement(h,s({ref:t},m))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5104:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=n(7896),r=(n(2784),n(876));const o={},s="Quickstart",i={unversionedId:"quickstart",id:"version-3.2.1/quickstart",title:"Quickstart",description:"Let's walk through setup of a form after installing the dependency properly.",source:"@site/versioned_docs/version-3.2.1/00-quickstart.md",sourceDirName:".",slug:"/quickstart",permalink:"/react-jsonschema-form/docs/version-3.2.1/quickstart",draft:!1,editUrl:"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/versioned_docs/version-3.2.1/00-quickstart.md",tags:[],version:"3.2.1",sidebarPosition:0,frontMatter:{},sidebar:"docs",next:{title:"Advanced Customization",permalink:"/react-jsonschema-form/docs/version-3.2.1/advanced-customization/"}},c={},l=[{value:"Form schema",id:"form-schema",level:2},{value:"Form uiSchema",id:"form-uischema",level:2},{value:"Form initialization",id:"form-initialization",level:2},{value:"Form event handlers",id:"form-event-handlers",level:3},{value:"Controlled component",id:"controlled-component",level:3}],m={toc:l},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"quickstart"},"Quickstart"),(0,r.kt)("p",null,"Let's walk through setup of a form after installing the dependency properly."),(0,r.kt)("h2",{id:"form-schema"},"Form schema"),(0,r.kt)("p",null,"First, specify a schema using the ",(0,r.kt)("a",{parentName:"p",href:"https://json-schema.org/"},"JSON Schema specification"),". The below schema renders a single string field:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'const schema = {\n  title: "Test form",\n  type: "string"\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById("app"));\n')),(0,r.kt)("p",null,"You can also render an object with multiple fields with the below schema:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'const schema = {\n  title: "Test form",\n  type: "object",\n  properties: {\n    name: {\n      type: "string"\n    },\n    age: {\n      type: "number"\n    }\n  }\n};\n\nrender((\n  <Form schema={schema} />\n), document.getElementById("app"));\n')),(0,r.kt)("p",null,"For more information and examples of JSON Schema properties that this library supports, see ",(0,r.kt)("a",{parentName:"p",href:"/react-jsonschema-form/docs/version-3.2.1/usage/single"},"Using JSON Schema"),"."),(0,r.kt)("h2",{id:"form-uischema"},"Form uiSchema"),(0,r.kt)("p",null,"The uiSchema is used to add more customization to the form's look and feel. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"classNames"),"\nattribute of the uiSchema to add a custom CSS class name to the form:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'const schema = {\n  title: "Test form",\n  type: "string"\n};\n\nconst uiSchema = {\n  classNames: "custom-css-class"\n};\n\nrender((\n  <Form schema={schema} uiSchema={uiSchema} />\n), document.getElementById("app"));\n')),(0,r.kt)("p",null,"To customize object fields in the uiSchema, the structure of the\nuiSchema should be ",(0,r.kt)("inlineCode",{parentName:"p"},"{key: value}"),", where ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," is the property key and ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," is an\nobject with the uiSchema configuration for that particular property. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'const schema = {\n  title: "Test form",\n  type: "object",\n  properties: {\n    name: {\n      type: "string"\n    },\n    age: {\n      type: "number"\n    }\n  }\n};\n\nconst uiSchema = {\n  name: {\n    classNames: "custom-class-name"\n  },\n  age: {\n    classNames: "custom-class-age"\n  }\n}\n\nrender((\n  <Form schema={schema} />\n), document.getElementById("app"));\n')),(0,r.kt)("h2",{id:"form-initialization"},"Form initialization"),(0,r.kt)("p",null,"Often you'll want to prefill a form with existing data; this is done by passing a ",(0,r.kt)("inlineCode",{parentName:"p"},"formData")," prop object matching the schema:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'const schema = {\n  type: "object",\n  properties: {\n    title: {\n      type: "string"\n    },\n    done: {\n      type: "boolean"\n    }\n  }\n};\n\nconst formData = {\n  title: "First task",\n  done: true\n};\n\nrender((\n  <Form schema={schema}\n        formData={formData} />\n), document.getElementById("app"));\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: If your form has a single field, pass a single value to ",(0,r.kt)("inlineCode",{parentName:"p"},"formData"),". ex: ",(0,r.kt)("inlineCode",{parentName:"p"},'formData="Charlie"'))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"WARNING: If you have situations where your parent component can re-render, make sure you listen to the ",(0,r.kt)("inlineCode",{parentName:"p"},"onChange")," event and update the data you pass to the ",(0,r.kt)("inlineCode",{parentName:"p"},"formData")," attribute.")),(0,r.kt)("h3",{id:"form-event-handlers"},"Form event handlers"),(0,r.kt)("p",null,"You can use event handlers such as ",(0,r.kt)("inlineCode",{parentName:"p"},"onChange"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"onError"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"onSubmit"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"onFocus"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"onBlur")," on the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Form />")," component; see the ",(0,r.kt)("a",{parentName:"p",href:"/react-jsonschema-form/docs/api-reference/form-props"},"Form Props Reference")," for more details."),(0,r.kt)("h3",{id:"controlled-component"},"Controlled component"),(0,r.kt)("p",null,"By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"<Form />")," is an ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/uncontrolled-components.html"},"uncontrolled component"),". To make it a controlled component, use the\n",(0,r.kt)("inlineCode",{parentName:"p"},"onChange")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"formData")," props as in the below example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'const App = () => {\n  const [formData, setFormData] = React.useState(null);\n  return (<Form\n    schema={{type: "string"}}\n    formData={formData}\n    onChange={e => setFormData(e.formData)}\n  />);\n};\n\nrender((\n  <App />\n), document.getElementById("app"));\n')))}u.isMDXComponent=!0}}]);