"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[2958],{876:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var r=n(2784);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var m=r.createContext({}),p=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(m.Provider,{value:t},e.children)},l="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,m=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),l=p(n),h=o,u=l["".concat(m,".").concat(h)]||l[h]||c[h]||a;return n?r.createElement(u,s(s({ref:t},d),{},{components:n})):r.createElement(u,s({ref:t},d))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=h;var i={};for(var m in t)hasOwnProperty.call(t,m)&&(i[m]=t[m]);i.originalType=e,i[l]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4336:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=n(7896),o=(n(2784),n(876));const a={},s="Custom Themes",i={unversionedId:"advanced-customization/custom-themes",id:"version-3.2.1/advanced-customization/custom-themes",title:"Custom Themes",description:"The withTheme component provides an easy way to extend the functionality of react-jsonschema-form by passing in a theme object that defines custom/overridden widgets and fields, as well as any of the other possible properties of the standard rjsf Form component. This theme-defining object is passed as the only parameter to the HOC (withTheme(ThemeObj)), and the HOC will return a themed-component which you use instead of the standard Form component.",source:"@site/versioned_docs/version-3.2.1/advanced-customization/custom-themes.md",sourceDirName:"advanced-customization",slug:"/advanced-customization/custom-themes",permalink:"/react-jsonschema-form/docs/version-3.2.1/advanced-customization/custom-themes",draft:!1,editUrl:"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/versioned_docs/version-3.2.1/advanced-customization/custom-themes.md",tags:[],version:"3.2.1",frontMatter:{},sidebar:"docs",previous:{title:"Custom Templates",permalink:"/react-jsonschema-form/docs/version-3.2.1/advanced-customization/custom-templates"},next:{title:"Custom Widgets and Fields",permalink:"/react-jsonschema-form/docs/version-3.2.1/advanced-customization/custom-widgets-fields"}},m={},p=[{value:"Usage",id:"usage",level:2},{value:"Theme object properties",id:"theme-object-properties",level:2},{value:"Widgets and fields",id:"widgets-and-fields",level:3},{value:"Templates",id:"templates",level:3},{value:"Overriding other Form props",id:"overriding-other-form-props",level:2}],d={toc:p},l="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(l,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"custom-themes"},"Custom Themes"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"withTheme")," component provides an easy way to extend the functionality of react-jsonschema-form by passing in a theme object that defines custom/overridden widgets and fields, as well as any of the other possible properties of the standard rjsf ",(0,o.kt)("inlineCode",{parentName:"p"},"Form")," component. This theme-defining object is passed as the only parameter to the HOC (",(0,o.kt)("inlineCode",{parentName:"p"},"withTheme(ThemeObj)"),"), and the HOC will return a themed-component which you use instead of the standard ",(0,o.kt)("inlineCode",{parentName:"p"},"Form")," component."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { Component } from 'react';\nimport { withTheme } from '@rjsf/core';\n\nconst theme = { widgets: {test: () => (<div>test</div>) } };\n\nconst ThemedForm = withTheme(theme); \n\nconst Demo = () => (\n  <ThemedForm schema={schema} uiSchema={uiSchema} />\n);\n")),(0,o.kt)("h2",{id:"theme-object-properties"},"Theme object properties"),(0,o.kt)("p",null,"The Theme object consists of the same properties as the rjsf ",(0,o.kt)("inlineCode",{parentName:"p"},"Form")," component (such as ",(0,o.kt)("strong",{parentName:"p"},"widgets")," and ",(0,o.kt)("strong",{parentName:"p"},"fields"),"). The themed-Form component merges together any theme-specific ",(0,o.kt)("strong",{parentName:"p"},"widgets")," and ",(0,o.kt)("strong",{parentName:"p"},"fields")," with the default ",(0,o.kt)("strong",{parentName:"p"},"widgets")," and ",(0,o.kt)("strong",{parentName:"p"},"fields"),". For instance, providing a single widget in ",(0,o.kt)("strong",{parentName:"p"},"widgets")," will merge this widget with all the default widgets of the rjsf ",(0,o.kt)("inlineCode",{parentName:"p"},"Form")," component, but overrides the default if the theme's widget's name matches the default widget's name. Thus, for each default widget or field not specified/overridden, the themed-form will rely on the defaults from the rjsf ",(0,o.kt)("inlineCode",{parentName:"p"},"Form"),". Note that you are not required to pass in either custom ",(0,o.kt)("strong",{parentName:"p"},"widgets")," or ",(0,o.kt)("strong",{parentName:"p"},"fields")," when using the custom-themed HOC component; you can make the essentially redefine the default Form by simply doing ",(0,o.kt)("inlineCode",{parentName:"p"},"const Form = withTheme({});"),"."),(0,o.kt)("h3",{id:"widgets-and-fields"},"Widgets and fields"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"widgets")," and ",(0,o.kt)("strong",{parentName:"p"},"fields")," should be in the same format as shown ",(0,o.kt)("a",{parentName:"p",href:"/advanced-customization/#custom-widgets-and-fields"},"here"),"."),(0,o.kt)("p",null,"Example theme with custom widget:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'const MyCustomWidget = (props) => {\n  return (\n    <input type="text"\n      className="custom"\n      value={props.value}\n      required={props.required}\n      onChange={(event) => props.onChange(event.target.value)} />\n  );\n};\n\nconst myWidgets = {\n  myCustomWidget: MyCustomWidget\n};\n\nconst ThemeObject = {widgets: myWidgets};\nexport default ThemeObject;\n')),(0,o.kt)("p",null,"The above can be similarly done for ",(0,o.kt)("strong",{parentName:"p"},"fields"),"."),(0,o.kt)("h3",{id:"templates"},"Templates"),(0,o.kt)("p",null,"Each template should be passed directly into the theme object just as you would into the rjsf Form component. Here is an example of how to use a custom ",(0,o.kt)("a",{parentName:"p",href:"/advanced-customization/#array-field-template"},"ArrayFieldTemplate")," and ",(0,o.kt)("a",{parentName:"p",href:"/advanced-customization/#error-list-template"},"ErrorListTemplate")," in the theme object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'function MyArrayFieldTemplate(props) {\n  return (\n    <div>\n      {props.items.map(element => element.children)}\n      {props.canAdd && <button type="button" onClick={props.onAddClick}></button>}\n    </div>\n  );\n}\n\nfunction MyErrorListTemplate(props) {\n  const {errors} = props;\n  return (\n    <ul>\n      {errors.map(error => (\n          <li key={error.stack}>\n            {error.stack}\n          </li>\n        ))}\n    </ul>\n  );\n}\n\nconst ThemeObject = {\n    ArrayFieldTemplate: MyArrayFieldTemplate, \n    ErrorList: MyErrorListTemplate,\n    widgets: myWidgets\n};\n\nexport default ThemeObject;\n')),(0,o.kt)("h2",{id:"overriding-other-form-props"},"Overriding other Form props"),(0,o.kt)("p",null,"Just as the theme can override ",(0,o.kt)("strong",{parentName:"p"},"widgets"),", ",(0,o.kt)("strong",{parentName:"p"},"fields"),", any of the field templates, and set default values to properties like ",(0,o.kt)("strong",{parentName:"p"},"showErrorList"),", you can do the same with the instance of the withTheme() Form component."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const ThemeObject = {\n    ArrayFieldTemplate: MyArrayFieldTemplate, \n    fields: myFields,\n    showErrorList: false,\n    widgets: myWidgets\n};\n")),(0,o.kt)("p",null,"Thus, the user has higher priority than the withTheme HOC, and the theme has higher priority than the default values of the rjsf Form component (",(0,o.kt)("strong",{parentName:"p"},"User")," > ",(0,o.kt)("strong",{parentName:"p"},"Theme")," > ",(0,o.kt)("strong",{parentName:"p"},"Defaults"),")."))}c.isMDXComponent=!0}}]);