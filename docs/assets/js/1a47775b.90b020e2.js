"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[1778],{876:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var o=a(2784);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,o)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,o,n=function(e,t){if(null==e)return{};var a,o,n={},r=Object.keys(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=o.createContext({}),m=function(e){var t=o.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=m(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=m(a),u=n,h=p["".concat(s,".").concat(u)]||p[u]||c[u]||r;return a?o.createElement(h,i(i({ref:t},d),{},{components:a})):o.createElement(h,i({ref:t},d))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,i=new Array(r);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:n,i[1]=l;for(var m=2;m<r;m++)i[m]=a[m];return o.createElement.apply(null,i)}return o.createElement.apply(null,a)}u.displayName="MDXCreateElement"},6756:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>m});var o=a(7896),n=(a(2784),a(876));const r={title:"<Form /> Props"},i="&lt;Form /> props",l={unversionedId:"api-reference/form-props",id:"version-3.2.1/api-reference/form-props",title:"<Form /> Props",description:"acceptcharset",source:"@site/versioned_docs/version-3.2.1/api-reference/form-props.md",sourceDirName:"api-reference",slug:"/api-reference/form-props",permalink:"/react-jsonschema-form/docs/version-3.2.1/api-reference/form-props",draft:!1,editUrl:"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/versioned_docs/version-3.2.1/api-reference/form-props.md",tags:[],version:"3.2.1",frontMatter:{title:"<Form /> Props"},sidebar:"docs",previous:{title:"API Reference",permalink:"/react-jsonschema-form/docs/version-3.2.1/api-reference/"},next:{title:"uiSchema Options for Semantic-UI",permalink:"/react-jsonschema-form/docs/version-3.2.1/api-reference/themes/semantic-ui/uiSchema"}},s={},m=[{value:"acceptcharset",id:"acceptcharset",level:2},{value:"action",id:"action",level:2},{value:"additionalMetaSchemas",id:"additionalmetaschemas",level:2},{value:"ArrayFieldTemplate",id:"arrayfieldtemplate",level:2},{value:"autoComplete",id:"autocomplete",level:2},{value:"autocomplete",id:"autocomplete-1",level:2},{value:"className",id:"classname",level:2},{value:"children",id:"children",level:2},{value:"customFormats",id:"customformats",level:2},{value:"disabled",id:"disabled",level:2},{value:"readonly",id:"readonly",level:2},{value:"enctype",id:"enctype",level:2},{value:"extraErrors",id:"extraerrors",level:2},{value:"ErrorList",id:"errorlist",level:2},{value:"fields",id:"fields",level:2},{value:"FieldTemplate",id:"fieldtemplate",level:2},{value:"formContext",id:"formcontext",level:2},{value:"formData",id:"formdata",level:2},{value:"id",id:"id",level:2},{value:"idPrefix",id:"idprefix",level:2},{value:"liveOmit",id:"liveomit",level:2},{value:"liveValidate",id:"livevalidate",level:2},{value:"method",id:"method",level:2},{value:"name",id:"name",level:2},{value:"noHtml5Validate",id:"nohtml5validate",level:2},{value:"noValidate",id:"novalidate",level:2},{value:"ObjectFieldTemplate",id:"objectfieldtemplate",level:2},{value:"omitExtraData",id:"omitextradata",level:2},{value:"onBlur",id:"onblur",level:2},{value:"onChange",id:"onchange",level:2},{value:"onError",id:"onerror",level:2},{value:"onFocus",id:"onfocus",level:2},{value:"onSubmit",id:"onsubmit",level:2},{value:"schema",id:"schema",level:2},{value:"showErrorList",id:"showerrorlist",level:2},{value:"tagName",id:"tagname",level:2},{value:"target",id:"target",level:2},{value:"transformErrors",id:"transformerrors",level:2},{value:"uiSchema",id:"uischema",level:2},{value:"validate",id:"validate",level:2},{value:"widgets",id:"widgets",level:2}],d={toc:m},p="wrapper";function c(e){let{components:t,...a}=e;return(0,n.kt)(p,(0,o.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"form--props"},"<","Form /> props"),(0,n.kt)("h2",{id:"acceptcharset"},"acceptcharset"),(0,n.kt)("p",null,"The value of this prop will be passed to the ",(0,n.kt)("inlineCode",{parentName:"p"},"accept-charset")," ",(0,n.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-accept-charset"},"HTML attribute on the form"),"."),(0,n.kt)("h2",{id:"action"},"action"),(0,n.kt)("p",null,"The value of this prop will be passed to the ",(0,n.kt)("inlineCode",{parentName:"p"},"action")," ",(0,n.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-action"},"HTML attribute on the form"),"."),(0,n.kt)("p",null,"Note that this just renders the ",(0,n.kt)("inlineCode",{parentName:"p"},"action")," attribute in the HTML markup. There is no real network request being sent to this ",(0,n.kt)("inlineCode",{parentName:"p"},"action")," on submit. Instead, react-jsonschema-form catches the submit event with ",(0,n.kt)("inlineCode",{parentName:"p"},"event.preventDefault()")," and then calls the ",(0,n.kt)("a",{parentName:"p",href:"#onSubmit"},(0,n.kt)("inlineCode",{parentName:"a"},"onSubmit"))," function, where you could send a request programmatically with ",(0,n.kt)("inlineCode",{parentName:"p"},"fetch")," or similar."),(0,n.kt)("h2",{id:"additionalmetaschemas"},"additionalMetaSchemas"),(0,n.kt)("p",null,"This prop allows you to validate the form data against another JSON Schema meta schema, for example, JSON Schema draft-04. See ",(0,n.kt)("a",{parentName:"p",href:"/react-jsonschema-form/docs/version-3.2.1/usage/validation"},"Validation")," for more information."),(0,n.kt)("h2",{id:"arrayfieldtemplate"},"ArrayFieldTemplate"),(0,n.kt)("p",null,"React component used to customize how alls arrays are rendered on the form. See ",(0,n.kt)("a",{parentName:"p",href:"/react-jsonschema-form/docs/version-3.2.1/advanced-customization/custom-templates"},"Custom Templates")," for more information."),(0,n.kt)("h2",{id:"autocomplete"},"autoComplete"),(0,n.kt)("p",null,"The value of this prop will be passed to the ",(0,n.kt)("inlineCode",{parentName:"p"},"autocomplete")," ",(0,n.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-autocomplete"},"HTML attribute on the form"),"."),(0,n.kt)("h2",{id:"autocomplete-1"},"autocomplete"),(0,n.kt)("p",null,"Deprecated, same functionality as ",(0,n.kt)("inlineCode",{parentName:"p"},"autoComplete")),(0,n.kt)("h2",{id:"classname"},"className"),(0,n.kt)("p",null,"The value of this prop will be passed to the ",(0,n.kt)("inlineCode",{parentName:"p"},"class")," ",(0,n.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form"},"HTML attribute on the form"),"."),(0,n.kt)("h2",{id:"children"},"children"),(0,n.kt)("p",null,"You can provide custom buttons to your form via the ",(0,n.kt)("inlineCode",{parentName:"p"},"Form")," component's ",(0,n.kt)("inlineCode",{parentName:"p"},"children"),". Otherwise a default submit button will be rendered."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},'const schema = {\n  type: "string"\n};\n\nrender((\n  <Form schema={schema}>\n    <div>\n      <button type="submit">Submit</button>\n      <button type="button">Cancel</button>\n    </div>\n  </Form>\n), document.getElementById("app"));\n')),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("strong",{parentName:"p"},"Warning:")," There needs to be a button or an input with ",(0,n.kt)("inlineCode",{parentName:"p"},'type="submit"')," to trigger the form submission (and then the form validation).")),(0,n.kt)("h2",{id:"customformats"},"customFormats"),(0,n.kt)("p",null,"This prop allows you to define custom formats for validation. See ",(0,n.kt)("a",{parentName:"p",href:"/react-jsonschema-form/docs/version-3.2.1/usage/validation"},"Validation")," for more information."),(0,n.kt)("h2",{id:"disabled"},"disabled"),(0,n.kt)("p",null,"It's possible to disable the whole form by setting the ",(0,n.kt)("inlineCode",{parentName:"p"},"disabled")," prop. The ",(0,n.kt)("inlineCode",{parentName:"p"},"disabled")," prop is then forwarded down to each field of the form."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},'const schema = {\n  type: "string"\n};\n\nrender((\n  <Form schema={schema}\n        disabled />\n), document.getElementById("app"));\n')),(0,n.kt)("p",null,"If you just want to disable some of the fields, see the ",(0,n.kt)("inlineCode",{parentName:"p"},"ui:disabled")," parameter in ",(0,n.kt)("inlineCode",{parentName:"p"},"uiSchema"),"."),(0,n.kt)("h2",{id:"readonly"},"readonly"),(0,n.kt)("p",null,"It's possible to make the whole form read-only by setting the ",(0,n.kt)("inlineCode",{parentName:"p"},"readonly")," prop. The ",(0,n.kt)("inlineCode",{parentName:"p"},"readonly")," prop is then forwarded down to each field of the form."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},'const schema = {\n  type: "string"\n};\n\nrender((\n  <Form schema={schema}\n        readonly />\n), document.getElementById("app"));\n')),(0,n.kt)("p",null,"If you just want to make some of the fields read-only, see the ",(0,n.kt)("inlineCode",{parentName:"p"},"ui:readonly")," parameter in ",(0,n.kt)("inlineCode",{parentName:"p"},"uiSchema"),"."),(0,n.kt)("h2",{id:"enctype"},"enctype"),(0,n.kt)("p",null,"The value of this prop will be passed to the ",(0,n.kt)("inlineCode",{parentName:"p"},"enctype")," ",(0,n.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-enctype"},"HTML attribute on the form"),"."),(0,n.kt)("h2",{id:"extraerrors"},"extraErrors"),(0,n.kt)("p",null,"This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it can be used to implement asynchronous validation. See ",(0,n.kt)("a",{parentName:"p",href:"/react-jsonschema-form/docs/version-3.2.1/usage/validation"},"Validation")," for more information."),(0,n.kt)("h2",{id:"errorlist"},"ErrorList"),(0,n.kt)("p",null,"You can pass a React component to this prop to customize how form errors are displayed. See ",(0,n.kt)("a",{parentName:"p",href:"/react-jsonschema-form/docs/version-3.2.1/usage/validation"},"Validation")," for more information."),(0,n.kt)("h2",{id:"fields"},"fields"),(0,n.kt)("p",null,"Dictionary of registered fields in the form. See ",(0,n.kt)("a",{parentName:"p",href:"/react-jsonschema-form/docs/version-3.2.1/advanced-customization/custom-widgets-fields"},"Custom Widgets and Fields")," for more information."),(0,n.kt)("h2",{id:"fieldtemplate"},"FieldTemplate"),(0,n.kt)("p",null,"React component used to customize each field of the form. See ",(0,n.kt)("a",{parentName:"p",href:"/react-jsonschema-form/docs/version-3.2.1/advanced-customization/custom-templates"},"Custom Templates")," for more information."),(0,n.kt)("h2",{id:"formcontext"},"formContext"),(0,n.kt)("p",null,"You can provide a ",(0,n.kt)("inlineCode",{parentName:"p"},"formContext")," object to the Form, which is passed down to all fields and widgets. Useful for implementing context aware fields and widgets."),(0,n.kt)("h2",{id:"formdata"},"formData"),(0,n.kt)("p",null,"Often you'll want to prefill a form with existing data; this is done by passing a ",(0,n.kt)("inlineCode",{parentName:"p"},"formData")," prop object matching the schema."),(0,n.kt)("h2",{id:"id"},"id"),(0,n.kt)("p",null,"The value of this prop will be passed to the ",(0,n.kt)("inlineCode",{parentName:"p"},"id")," ",(0,n.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form"},"HTML attribute on the form"),"."),(0,n.kt)("h2",{id:"idprefix"},"idPrefix"),(0,n.kt)("p",null,"To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids (the default is ",(0,n.kt)("inlineCode",{parentName:"p"},"root"),")."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},'const schema = {\n  type: "string"\n};\n\nrender((\n  <Form schema={schema}\n        idPrefix={"rjsf_prefix"}/>\n), document.getElementById("app"));\n')),(0,n.kt)("p",null,"This will render ",(0,n.kt)("inlineCode",{parentName:"p"},'<input id="rjsf_prefix_key">')," instead of ",(0,n.kt)("inlineCode",{parentName:"p"},'<input id="root_key">')),(0,n.kt)("h2",{id:"liveomit"},"liveOmit"),(0,n.kt)("p",null,"If ",(0,n.kt)("inlineCode",{parentName:"p"},"omitExtraData")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"liveOmit")," are both set to true, then extra form data values that are not in any form field will be removed whenever ",(0,n.kt)("inlineCode",{parentName:"p"},"onChange")," is called. Set to ",(0,n.kt)("inlineCode",{parentName:"p"},"false")," by default."),(0,n.kt)("h2",{id:"livevalidate"},"liveValidate"),(0,n.kt)("p",null,"If set to true, the form will perform validation and show any validation errors whenever the form data is changed, rather than just on submit."),(0,n.kt)("h2",{id:"method"},"method"),(0,n.kt)("p",null,"The value of this prop will be passed to the ",(0,n.kt)("inlineCode",{parentName:"p"},"method")," ",(0,n.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-method"},"HTML attribute on the form"),"."),(0,n.kt)("h2",{id:"name"},"name"),(0,n.kt)("p",null,"The value of this prop will be passed to the ",(0,n.kt)("inlineCode",{parentName:"p"},"name")," ",(0,n.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-name"},"HTML attribute on the form"),"."),(0,n.kt)("h2",{id:"nohtml5validate"},"noHtml5Validate"),(0,n.kt)("p",null,"If set to true, turns off HTML5 validation on the form. Set to ",(0,n.kt)("inlineCode",{parentName:"p"},"false")," on default."),(0,n.kt)("h2",{id:"novalidate"},"noValidate"),(0,n.kt)("p",null,"If set to true, turns off all validation. Set to ",(0,n.kt)("inlineCode",{parentName:"p"},"false")," by default."),(0,n.kt)("h2",{id:"objectfieldtemplate"},"ObjectFieldTemplate"),(0,n.kt)("p",null,"React component used to customize how all objects are rendered in the form. See ",(0,n.kt)("a",{parentName:"p",href:"/react-jsonschema-form/docs/version-3.2.1/advanced-customization/custom-templates"},"Custom Templates")," for more information."),(0,n.kt)("h2",{id:"omitextradata"},"omitExtraData"),(0,n.kt)("p",null,"If set to true, then extra form data values that are not in any form field will be removed whenever ",(0,n.kt)("inlineCode",{parentName:"p"},"onSubmit")," is called. Set to ",(0,n.kt)("inlineCode",{parentName:"p"},"false")," by default."),(0,n.kt)("h2",{id:"onblur"},"onBlur"),(0,n.kt)("p",null,"Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass an ",(0,n.kt)("inlineCode",{parentName:"p"},"onBlur")," handler, which will receive the id of the input that was blurred and the field value."),(0,n.kt)("h2",{id:"onchange"},"onChange"),(0,n.kt)("p",null,"If you plan on being notified every time the form data are updated, you can pass an ",(0,n.kt)("inlineCode",{parentName:"p"},"onChange")," handler, which will receive the same args as ",(0,n.kt)("inlineCode",{parentName:"p"},"onSubmit")," any time a value is updated in the form."),(0,n.kt)("h2",{id:"onerror"},"onError"),(0,n.kt)("p",null,"To react when submitted form data are invalid, pass an ",(0,n.kt)("inlineCode",{parentName:"p"},"onError")," handler. It will be passed the list of encountered errors:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},'const schema = {\n  type: "string"\n};\nconst onError = (errors) => console.log("I have", errors.length, "errors to fix");\n\nrender((\n  <Form schema={schema}\n        onError={onError} />\n), document.getElementById("app"));\n')),(0,n.kt)("h2",{id:"onfocus"},"onFocus"),(0,n.kt)("p",null,"Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass an ",(0,n.kt)("inlineCode",{parentName:"p"},"onFocus")," handler, which will receive the id of the input that is focused and the field value."),(0,n.kt)("h2",{id:"onsubmit"},"onSubmit"),(0,n.kt)("p",null,"You can pass a function as the ",(0,n.kt)("inlineCode",{parentName:"p"},"onSubmit")," prop of your ",(0,n.kt)("inlineCode",{parentName:"p"},"Form")," component to listen to when the form is submitted and its data are valid. It will be passed a result object having a ",(0,n.kt)("inlineCode",{parentName:"p"},"formData")," attribute, which is the valid form data you're usually after. The original event will also be passed as a second parameter:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},'const schema = {\n  type: "string"\n};\nconst onSubmit = ({formData}, e) => console.log("Data submitted: ",  formData);\n\nrender((\n  <Form schema={schema}\n        onSubmit={onSubmit} />\n), document.getElementById("app"));\n')),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Note: If there are fields in the ",(0,n.kt)("inlineCode",{parentName:"p"},"formData")," that are not represented in the schema, they will be retained by default. If you would like to remove those extra values on form submission, you may need to set the ",(0,n.kt)("inlineCode",{parentName:"p"},"omitExtraData")," and/or ",(0,n.kt)("inlineCode",{parentName:"p"},"liveOmit")," props.")),(0,n.kt)("h2",{id:"schema"},"schema"),(0,n.kt)("p",null,"Form schema. We support JSON schema draft-07 by default. See ",(0,n.kt)("a",{parentName:"p",href:"https://json-schema.org/draft-07/json-schema-release-notes.html"},"Schema Reference")," for more information."),(0,n.kt)("h2",{id:"showerrorlist"},"showErrorList"),(0,n.kt)("p",null,"When this prop is set to true, a list of errors (or the custom error list defined in the ",(0,n.kt)("inlineCode",{parentName:"p"},"ErrorList"),") will also show. When set to false, only inline input validation errors will be shown. Set to ",(0,n.kt)("inlineCode",{parentName:"p"},"true")," by default. See ",(0,n.kt)("a",{parentName:"p",href:"/react-jsonschema-form/docs/version-3.2.1/usage/validation"},"Validation")," for more information."),(0,n.kt)("h2",{id:"tagname"},"tagName"),(0,n.kt)("p",null,"It's possible to change the default ",(0,n.kt)("inlineCode",{parentName:"p"},"form")," tag name to a different HTML tag, which can be helpful if you are nesting forms. However, native browser form behaviour, such as submitting when the ",(0,n.kt)("inlineCode",{parentName:"p"},"Enter")," key is pressed, may no longer work."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},'<Form\n  tagName="div"\n/>\n')),(0,n.kt)("p",null,"You can also provide a class/function component."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-jsx"},"const CustomForm = props => <form {...props} style={...} className={...} />\n// ...\n<Form\n  tagName={CustomForm}\n/>\n")),(0,n.kt)("h2",{id:"target"},"target"),(0,n.kt)("p",null,"The value of this prop will be passed to the ",(0,n.kt)("inlineCode",{parentName:"p"},"target")," ",(0,n.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#attr-target"},"HTML attribute on the form"),"."),(0,n.kt)("h2",{id:"transformerrors"},"transformErrors"),(0,n.kt)("p",null,"A function can be passed to this prop in order to make modifications to the default errors resulting from JSON Schema validation. See ",(0,n.kt)("a",{parentName:"p",href:"/react-jsonschema-form/docs/version-3.2.1/usage/validation"},"Validation")," for more information."),(0,n.kt)("h2",{id:"uischema"},"uiSchema"),(0,n.kt)("p",null,"Form uiSchema. See ",(0,n.kt)("a",{parentName:"p",href:"/react-jsonschema-form/docs/version-3.2.1/api-reference/uiSchema"},"uiSchema Reference")," for more information."),(0,n.kt)("h2",{id:"validate"},"validate"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"validate")," prop requires a function that specifies custom validation rules for the form. See ",(0,n.kt)("a",{parentName:"p",href:"/react-jsonschema-form/docs/version-3.2.1/usage/validation"},"Validation")," for more information."),(0,n.kt)("h2",{id:"widgets"},"widgets"),(0,n.kt)("p",null,"Dictionary of registered widgets in the form. See ",(0,n.kt)("a",{parentName:"p",href:"/react-jsonschema-form/docs/version-3.2.1/advanced-customization/custom-widgets-fields"},"Custom Widgets and Fields")," for more information."))}c.isMDXComponent=!0}}]);